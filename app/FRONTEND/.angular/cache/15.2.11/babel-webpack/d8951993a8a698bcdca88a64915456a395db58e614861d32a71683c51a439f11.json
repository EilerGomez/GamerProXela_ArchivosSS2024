{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Usuario } from 'src/app/Modelo/Usuario';\nlet ListarUsuariosComponent = class ListarUsuariosComponent {\n  constructor(servicioUser, servicioSucursal) {\n    this.servicioUser = servicioUser;\n    this.servicioSucursal = servicioSucursal;\n    this.mostrarEditar = false;\n    this.mostrarNuevoUsuario = false;\n    /*para nuevo usuario */\n    this.nombreUsuario = '';\n    this.rolUsuario = '';\n    this.sucursalUsuario = '';\n    this.password = '';\n    this.confirmPassword = '';\n    this.activo = false;\n  }\n  iniciarvariables() {\n    this.nombreUsuario = '';\n    this.rolUsuario = '';\n    this.sucursalUsuario = '';\n    this.password = '';\n    this.confirmPassword = '';\n    this.activo = false;\n  }\n  getRolDB() {\n    let stringUser = localStorage.getItem('usuario');\n    let usuario = stringUser ? JSON.parse(stringUser) : null;\n    let rol = usuario ? usuario.rol : 0;\n    return rol;\n  }\n  ngOnInit() {\n    this.iniciarvariables();\n    let stringUser = localStorage.getItem('usuario');\n    let usuario = stringUser ? JSON.parse(stringUser) : null;\n    let rol = usuario ? usuario.rol : 0;\n    this.servicioUser.getUsuarios(rol).subscribe(data => {\n      this.traerSucursales(rol);\n      this.usuarios = data;\n    });\n  }\n  traerSucursales(rol) {\n    this.servicioSucursal.getSucursales(rol).subscribe(data => {\n      this.sucursales = data;\n    }, error => {\n      console.log(error);\n    });\n  }\n  obtenerRol(rol) {\n    switch (rol) {\n      case 1:\n        return 'Administrador';\n      case 2:\n        return 'De inventario';\n      case 3:\n        return 'Bodeguero';\n      case 4:\n        return 'Cajero';\n      default:\n        return 'Desconocido';\n    }\n  }\n  obtenerSucursal(sucursal) {\n    switch (sucursal) {\n      case 1:\n        return 'Sucursal Parque';\n      case 2:\n        return 'Sucursal Centro1';\n      case 3:\n        return 'Sucursal Centro2';\n      default:\n        return 'desconocido';\n    }\n  }\n  veificarRol(usuario) {\n    if (usuario.rol == 0) usuario.rol = this.usuarioEdit.rol;\n    return usuario;\n  }\n  actualizarUsuario(id, nombre, pass, rol, sucural) {\n    const userAct = new Usuario(id, nombre, pass, parseInt(rol), parseInt(sucural), this.usuarioEdit.activo);\n    this.servicioUser.putUsuario(this.veificarRol(userAct), this.getRolDB()).subscribe(data => {\n      console.log(data);\n      this.ngOnInit();\n      alert('El usuario ' + userAct.identificacion + ' ha sido actualizado');\n      this.usuarioEdit = userAct;\n    }, error => {\n      alert('Error al actualizar los datos del usuario ' + userAct.identificacion);\n      this.ngOnInit();\n    });\n    this.mostrarEditar = false;\n  }\n  mostrarActualizar(usuario) {\n    this.usuarioEdit = new Usuario(usuario.identificacion, usuario.nombre, usuario.pass, usuario.rol, usuario.sucursal, usuario.activo);\n    console.log(this.usuarioEdit);\n    this.usuarioEdit = usuario;\n    this.mostrarEditar = true;\n    this.mostrarNuevoUsuario = false;\n  }\n  eliminarUser(usuario) {\n    const confirmacion = confirm(\"¿Estás seguro de que deseas eliminar el usuario: \" + usuario.identificacion + \" - \" + usuario.nombre + \"?\");\n    if (confirmacion) {\n      this.servicioUser.deleteUsuario(usuario, this.getRolDB()).subscribe(data => {\n        this.ngOnInit();\n        alert(\"Se ha eliminado correctamente el usuario\");\n      });\n    }\n  }\n  crearNuevoUsuario() {\n    const userAct = new Usuario(10, this.nombreUsuario, this.confirmPassword, parseInt(this.rolUsuario), parseInt(this.sucursalUsuario), this.activo);\n    this.servicioUser.postUsuario(userAct, this.getRolDB()).subscribe(data => {\n      alert(\"Se ha creado el nuevo usuario!\");\n      this.mostrarNuevoUsuario = false;\n      this.ngOnInit();\n    }, error => {\n      alert(\"Error al guardar el nuevo usuario!\");\n      this.ngOnInit();\n    });\n  }\n  mostrarActivo(activo) {\n    return activo ? \"SI\" : \"NO\";\n  }\n};\nListarUsuariosComponent = __decorate([Component({\n  selector: 'app-listar-usuarios',\n  templateUrl: './listar-usuarios.component.html',\n  styleUrls: ['./listar-usuarios.component.css']\n})], ListarUsuariosComponent);\nexport { ListarUsuariosComponent };","map":{"version":3,"mappings":"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","names":["Component","Usuario","ListarUsuariosComponent","constructor","servicioUser","servicioSucursal","iniciarvariables","nombreUsuario","rolUsuario","sucursalUsuario","password","confirmPassword","activo","getRolDB","stringUser","localStorage","getItem","usuario","JSON","parse","rol","ngOnInit","getUsuarios","subscribe","data","traerSucursales","usuarios","getSucursales","sucursales","error","console","log","obtenerRol","obtenerSucursal","sucursal","veificarRol","usuarioEdit","actualizarUsuario","id","nombre","pass","sucural","userAct","parseInt","putUsuario","alert","identificacion","mostrarEditar","mostrarActualizar","mostrarNuevoUsuario","eliminarUser","confirmacion","confirm","deleteUsuario","crearNuevoUsuario","postUsuario","mostrarActivo","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/eiler/Documentos/Universidad/SegundoSemestre2024/Archivos/Proyecto1/app/FRONTEND/src/app/area-administrador/listar-usuarios/listar-usuarios.component.ts"],"sourcesContent":["import { Component,OnInit } from '@angular/core';\nimport { UsuariosService } from 'src/app/Service/usuarios.service';\nimport { SucursalesService } from 'src/app/Service/sucursales.service';\nimport { Usuario } from 'src/app/Modelo/Usuario';\nimport { Sucursal } from 'src/app/Modelo/Sucursal';\n\n@Component({\n  selector: 'app-listar-usuarios',\n  templateUrl: './listar-usuarios.component.html',\n  styleUrls: ['./listar-usuarios.component.css']\n})\nexport class ListarUsuariosComponent {\n  constructor(private servicioUser:UsuariosService, private servicioSucursal:SucursalesService){}\n  mostrarEditar: boolean = false;\n  mostrarNuevoUsuario: boolean = false;\n  usuarios!:Usuario[]\n  sucursales!:Sucursal[]\n  usuarioEdit!:Usuario\n  nuevoUsuario!:Usuario\n\n  /*para nuevo usuario */\n  nombreUsuario: string = '';\n  rolUsuario: string  = '';\n  sucursalUsuario: string  = '';\n  password: string = '';\n  confirmPassword: string = '';\n  activo:boolean=false;\n  iniciarvariables(){\n    this.nombreUsuario = '';\n    this.rolUsuario  = '';\n    this.sucursalUsuario  = '';\n    this.password = '';\n    this.confirmPassword = '';\n    this.activo=false;\n  }\n  getRolDB():number{\n    let stringUser = localStorage.getItem('usuario');\n    let usuario:Usuario = stringUser? JSON.parse(stringUser):null;\n    let rol = usuario? usuario.rol:0;\n    return rol;\n  }\n  ngOnInit():void{\n    this.iniciarvariables();\n    let stringUser = localStorage.getItem('usuario');\n    let usuario:Usuario = stringUser? JSON.parse(stringUser):null;\n    let rol = usuario? usuario.rol:0;\n    this.servicioUser.getUsuarios(rol).subscribe(data => {\n      this.traerSucursales(rol)\n      this.usuarios = data;\n      \n    })\n    \n  }\n  traerSucursales(rol:number){\n    this.servicioSucursal.getSucursales(rol).subscribe(data=>{\n      this.sucursales=data;\n    },error=>{console.log(error)})\n  }\n  obtenerRol(rol: number): string {\n    switch (rol) {\n      case 1:\n        return 'Administrador';\n      case 2:\n        return 'De inventario';\n      case 3:\n        return 'Bodeguero';\n      case 4:\n        return 'Cajero';\n      default:\n        return 'Desconocido';\n    }\n  }\n\n  obtenerSucursal(sucursal:number):string{\n    switch (sucursal) {\n      case 1:\n        return 'Sucursal Parque';\n      case 2:\n        return 'Sucursal Centro1';\n      case 3:\n        return 'Sucursal Centro2';\n      default:\n        return 'desconocido';\n    }\n  }\n\n  veificarRol(usuario:Usuario):Usuario{\n    if(usuario.rol==0) usuario.rol=this.usuarioEdit.rol;\n    return usuario;\n  }\n  actualizarUsuario(id:number,nombre:String,pass:String,rol:string,sucural:string){\n    const userAct= new Usuario(id,nombre,pass,parseInt(rol),parseInt(sucural),this.usuarioEdit.activo)\n    this.servicioUser.putUsuario(this.veificarRol(userAct),this.getRolDB()).subscribe(data=>{\n      console.log(data)\n      this.ngOnInit();\n      alert('El usuario ' + userAct.identificacion + ' ha sido actualizado');\n      \n      this.usuarioEdit=userAct;\n    }, error=>{\n      alert('Error al actualizar los datos del usuario '+userAct.identificacion);\n      this.ngOnInit();\n    })\n    this.mostrarEditar=false\n    \n  }\n  mostrarActualizar(usuario:Usuario){\n    this.usuarioEdit=new Usuario(usuario.identificacion,usuario.nombre,usuario.pass,usuario.rol,usuario.sucursal,usuario.activo);\n    console.log(this.usuarioEdit)\n    this.usuarioEdit=usuario;\n    this.mostrarEditar=true;\n    this.mostrarNuevoUsuario=false\n  }\n\n  eliminarUser(usuario:Usuario){\n    const confirmacion = confirm(\"¿Estás seguro de que deseas eliminar el usuario: \"+usuario.identificacion + \" - \"+usuario.nombre  + \"?\");\n    if(confirmacion){\n      this.servicioUser.deleteUsuario(usuario,this.getRolDB()).subscribe(data=>{\n        this.ngOnInit();\n        alert(\"Se ha eliminado correctamente el usuario\")\n      })\n    }\n  }\n\n  crearNuevoUsuario(){\n    const userAct= new Usuario(10,this.nombreUsuario,this.confirmPassword,parseInt(this.rolUsuario),parseInt(this.sucursalUsuario),this.activo)\n    this.servicioUser.postUsuario(userAct,this.getRolDB()).subscribe(data=>{\n      alert(\"Se ha creado el nuevo usuario!\")\n      this.mostrarNuevoUsuario=false;\n      this.ngOnInit()\n    },error=>{\n      alert(\"Error al guardar el nuevo usuario!\")\n      this.ngOnInit()\n    })\n  }\n\n  mostrarActivo(activo: boolean): string {\n    return activo ? \"SI\" : \"NO\";\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}