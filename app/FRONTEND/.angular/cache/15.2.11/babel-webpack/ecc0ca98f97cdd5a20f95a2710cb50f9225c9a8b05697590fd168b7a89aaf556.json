{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nlet TrasladarProductosComponent = class TrasladarProductosComponent {\n  constructor(servicioProductos) {\n    this.servicioProductos = servicioProductos;\n    this.mostrarTrasladar = false;\n  }\n  ngOnInit() {\n    this.servicioProductos.getProductosSucursal(this.getSucursal(), this.getRolDB()).subscribe(data => {\n      this.productos = data;\n      this.productosT = data;\n    });\n  }\n  getRolDB() {\n    let stringUser = localStorage.getItem('usuario');\n    let usuario = stringUser ? JSON.parse(stringUser) : null;\n    let rol = usuario ? usuario.rol : 0;\n    return rol;\n  }\n  getSucursal() {\n    let stringUser = localStorage.getItem('usuario');\n    let usuario = stringUser ? JSON.parse(stringUser) : null;\n    let suc = usuario ? usuario.sucursal : 0;\n    return suc;\n  }\n  addEstanteria(p) {\n    this.productoPasanteStanteria = p;\n    this.mostrarTrasladar = true;\n  }\n  agregarNuevoIncluido(agregarEstanteria) {\n    agregarEstanteria.resetForm();\n  }\n  searchProducto(clave) {\n    this.productos = clave === \"\" ? this.productosT : this.buscarProductos(clave, this.productosT);\n  }\n  buscarProductos(clave, productos) {\n    const claveNormalizada = clave.toLowerCase();\n    return productos.filter(producto => {\n      return producto.nombre.toLowerCase().includes(claveNormalizada) || producto.codigo.toString().includes(clave) || producto.precio_unitario_venta.toString().includes(clave);\n    });\n  }\n};\nTrasladarProductosComponent = __decorate([Component({\n  selector: 'app-trasladar-productos',\n  templateUrl: './trasladar-productos.component.html',\n  styleUrls: ['./trasladar-productos.component.css']\n})], TrasladarProductosComponent);\nexport { TrasladarProductosComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,QAAQ,eAAe;AAUlC,IAAMC,2BAA2B,GAAjC,MAAMA,2BAA2B;EAEtCC,YAAoBC,iBAAkC;IAAlC,sBAAiB,GAAjBA,iBAAiB;IAIrC,qBAAgB,GAAS,KAAK;EAJ0B;EAWxDC,QAAQ;IACN,IAAI,CAACD,iBAAiB,CAACE,oBAAoB,CAAC,IAAI,CAACC,WAAW,EAAE,EAAC,IAAI,CAACC,QAAQ,EAAE,CAAC,CAACC,SAAS,CAACC,IAAI,IAAE;MAC9F,IAAI,CAACC,SAAS,GAACD,IAAI;MACnB,IAAI,CAACE,UAAU,GAACF,IAAI;IACtB,CAAC,CAAC;EACJ;EACAF,QAAQ;IACN,IAAIK,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC;IAChD,IAAIC,OAAO,GAAWH,UAAU,GAAEI,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC,GAAC,IAAI;IAC7D,IAAIM,GAAG,GAAGH,OAAO,GAAEA,OAAO,CAACG,GAAG,GAAC,CAAC;IAChC,OAAOA,GAAG;EACZ;EACAZ,WAAW;IACT,IAAIM,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,SAAS,CAAC;IAChD,IAAIC,OAAO,GAAWH,UAAU,GAAEI,IAAI,CAACC,KAAK,CAACL,UAAU,CAAC,GAAC,IAAI;IAC7D,IAAIO,GAAG,GAAGJ,OAAO,GAAEA,OAAO,CAACK,QAAQ,GAAC,CAAC;IACrC,OAAOD,GAAG;EACZ;EAGAE,aAAa,CAACC,CAAU;IACtB,IAAI,CAACC,wBAAwB,GAACD,CAAC;IAC/B,IAAI,CAACE,gBAAgB,GAAC,IAAI;EAC5B;EAEAC,oBAAoB,CAACC,iBAAwB;IAC3CA,iBAAiB,CAACC,SAAS,EAAE;EAC/B;EAEAC,cAAc,CAACC,KAAa;IAC1B,IAAI,CAACnB,SAAS,GAAGmB,KAAK,KAAK,EAAE,GAAG,IAAI,CAAClB,UAAU,GAAG,IAAI,CAACmB,eAAe,CAACD,KAAK,EAAE,IAAI,CAAClB,UAAU,CAAC;EAChG;EAGAmB,eAAe,CAACD,KAAa,EAAEnB,SAAqB;IAClD,MAAMqB,gBAAgB,GAAGF,KAAK,CAACG,WAAW,EAAE;IAE5C,OAAOtB,SAAS,CAACuB,MAAM,CAACC,QAAQ,IAAG;MACjC,OACEA,QAAQ,CAACC,MAAM,CAACH,WAAW,EAAE,CAACI,QAAQ,CAACL,gBAAgB,CAAC,IACxDG,QAAQ,CAACG,MAAM,CAACC,QAAQ,EAAE,CAACF,QAAQ,CAACP,KAAK,CAAC,IAC1CK,QAAQ,CAACK,qBAAqB,CAACD,QAAQ,EAAE,CAACF,QAAQ,CAACP,KAAK,CAAC;IAE7D,CAAC,CAAC;EACJ;CAED;AA3DY5B,2BAA2B,eALvCD,SAAS,CAAC;EACTwC,QAAQ,EAAE,yBAAyB;EACnCC,WAAW,EAAE,sCAAsC;EACnDC,SAAS,EAAE,CAAC,qCAAqC;CAClD,CAAC,GACWzC,2BAA2B,CA2DvC;SA3DYA,2BAA2B","names":["Component","TrasladarProductosComponent","constructor","servicioProductos","ngOnInit","getProductosSucursal","getSucursal","getRolDB","subscribe","data","productos","productosT","stringUser","localStorage","getItem","usuario","JSON","parse","rol","suc","sucursal","addEstanteria","p","productoPasanteStanteria","mostrarTrasladar","agregarNuevoIncluido","agregarEstanteria","resetForm","searchProducto","clave","buscarProductos","claveNormalizada","toLowerCase","filter","producto","nombre","includes","codigo","toString","precio_unitario_venta","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/eiler/Documentos/Universidad/SegundoSemestre2024/Archivos/Proyecto1/app/FRONTEND/src/app/area-inventario/trasladar-productos/trasladar-productos.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Producto } from 'src/app/Modelo/Producto';\nimport { ProductosService } from 'src/app/Service/productos.service';\nimport { Usuario } from 'src/app/Modelo/Usuario';\nimport { NgForm } from '@angular/forms';\n@Component({\n  selector: 'app-trasladar-productos',\n  templateUrl: './trasladar-productos.component.html',\n  styleUrls: ['./trasladar-productos.component.css']\n})\nexport class TrasladarProductosComponent {\n\n  constructor(private servicioProductos:ProductosService){}\n\n  productoPasanteStanteria!:Producto\n  productos!:Producto[]\n  mostrarTrasladar:boolean=false\n  claveBusqueda!:string\n  productosT!:Producto[]\n\n  pasilloEstanteria!:number\n  cantidadPrEstanteria!:number\n\n  ngOnInit():void{\n    this.servicioProductos.getProductosSucursal(this.getSucursal(),this.getRolDB()).subscribe(data=>{\n      this.productos=data;\n      this.productosT=data;\n    })\n  }\n  getRolDB(){\n    let stringUser = localStorage.getItem('usuario');\n    let usuario:Usuario = stringUser? JSON.parse(stringUser):null;\n    let rol = usuario? usuario.rol:0;\n    return rol;\n  }\n  getSucursal(){\n    let stringUser = localStorage.getItem('usuario');\n    let usuario:Usuario = stringUser? JSON.parse(stringUser):null;\n    let suc = usuario? usuario.sucursal:0;\n    return suc;\n  }\n\n\n  addEstanteria(p:Producto){\n    this.productoPasanteStanteria=p;\n    this.mostrarTrasladar=true\n  }\n\n  agregarNuevoIncluido(agregarEstanteria:NgForm){\n    agregarEstanteria.resetForm();\n  }\n\n  searchProducto(clave: string) {\n    this.productos = clave === \"\" ? this.productosT : this.buscarProductos(clave, this.productosT);\n  }\n  \n\n  buscarProductos(clave: string, productos: Producto[]): Producto[] {\n    const claveNormalizada = clave.toLowerCase();\n    \n    return productos.filter(producto => {\n      return (\n        producto.nombre.toLowerCase().includes(claveNormalizada) || \n        producto.codigo.toString().includes(clave)||\n        producto.precio_unitario_venta.toString().includes(clave)\n      );\n    });\n  }\n  \n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}