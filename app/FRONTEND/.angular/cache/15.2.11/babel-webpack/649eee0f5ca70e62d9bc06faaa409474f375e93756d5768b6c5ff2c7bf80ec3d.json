{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Venta } from 'src/app/Modelo/Venta';\nimport { Producto } from 'src/app/Modelo/Producto';\nlet VentasComponent = class VentasComponent {\n  constructor(servicioVentas, servicioProductos, servicioClientes) {\n    this.servicioVentas = servicioVentas;\n    this.servicioProductos = servicioProductos;\n    this.servicioClientes = servicioClientes;\n    this.totalNuevaVenta = 0;\n    this.mostrarDetalles = false;\n    this.mostrarNuevaVenta = false;\n    this.mostrarSeleccionarCliente = false;\n    this.productoSeleccionado = new Producto(1, \"\", 0, \"\", 12, 1);\n  }\n  ngOnInit() {\n    this.servicioVentas.getVentas(this.getRolDB(), this.getSucursal()).subscribe(data => {\n      this.ventas = data;\n      this.traerProductos();\n      this.getClientes();\n    }, error => {\n      console.log(error);\n      this.traerProductos();\n      this.getClientes();\n    });\n  }\n  verDetalles(v) {\n    console.log(v);\n  }\n  nuevaVenta() {\n    //generar la nueva venta\n    this.productosNuevaVenta = [];\n    this.totalNuevaVenta = 0;\n    this.mostrarNuevaVenta = true;\n    let v = new Venta(1, this.getIDUser(), \"\", this.getSucursal(), \"\", this.idCliente, \"\", \"\", 0, 0, \"\", this.getCaja(), 0);\n    console.log(v);\n    this.servicioVentas.NuevaVenta(v, this.getRolDB()).subscribe(data => {\n      this.codigoNuevaVenta = data.codido_venta;\n    });\n  }\n  mostrarInfoProducto() {\n    console.log(\"Mostrar info de producto\");\n    this.productoSeleccionado = this.getProducto(this.productos, this.idProductoSeleccionado);\n  }\n  dejarDeMostrarNuevaVenta() {\n    this.mostrarNuevaVenta = false;\n    if (this.totalNuevaVenta == 0) {\n      //eliminar la venta\n      this.ngOnInit();\n    } else {\n      this.ngOnInit();\n    }\n  }\n  traerProductos() {\n    this.servicioProductos.getProductosSucursal(this.getSucursal(), this.getRolDB()).subscribe(data => {\n      this.productos = data;\n      console.log(this.productos);\n    }, error => {\n      console.log(error);\n    });\n  }\n  agregarProductoAVenta(nuevaVentaForm) {\n    nuevaVentaForm.resetForm();\n    //insertar productos a la venta\n  }\n\n  getRolDB() {\n    let stringUser = localStorage.getItem('usuario');\n    let usuario = stringUser ? JSON.parse(stringUser) : null;\n    let rol = usuario ? usuario.rol : 0;\n    return rol;\n  }\n  getCaja() {\n    let stringUser = localStorage.getItem('codigocaja');\n    let caja = parseInt(stringUser ? JSON.parse(stringUser) : \"\");\n    return caja;\n  }\n  getIDUser() {\n    let stringUser = localStorage.getItem('usuario');\n    let usuario = stringUser ? JSON.parse(stringUser) : null;\n    let rol = usuario ? usuario.identificacion : 0;\n    return rol;\n  }\n  getSucursal() {\n    let stringUser = localStorage.getItem('usuario');\n    let usuario = stringUser ? JSON.parse(stringUser) : null;\n    let suc = usuario ? usuario.sucursal : 0;\n    return suc;\n  }\n  getProducto(productos, idp) {\n    let pr = new Producto(1, \"\", 0, \"\", 0, 4);\n    productos.forEach(p => {\n      if (p.codigo == idp) {\n        pr = p;\n      }\n    });\n    return pr;\n  }\n  getClientes() {\n    this.servicioClientes.getClientes(this.getRolDB()).subscribe(data => {\n      this.clientes = data;\n      console.log(this.clientes);\n    }, error => {\n      console.log(error);\n    });\n  }\n  searchProducto(clave) {\n    this.clientes = clave === \"\" ? this.clientesT : this.buscarClientes(clave, this.clientesT);\n  }\n  buscarClientes(clave, clientes) {\n    const claveNormalizada = clave.toLowerCase();\n    return clientes.filter(cliente => {\n      return cliente.identificacion.toString().includes(claveNormalizada) || cliente.nombre.toLowerCase().includes(claveNormalizada) || cliente.nit.toLowerCase().includes(claveNormalizada) || cliente.telefono.toString().includes(claveNormalizada);\n    });\n  }\n  seleccionarCliente(idC) {\n    this.mostrarSeleccionarCliente = true;\n  }\n};\nVentasComponent = __decorate([Component({\n  selector: 'app-ventas',\n  templateUrl: './ventas.component.html',\n  styleUrls: ['./ventas.component.css']\n})], VentasComponent);\nexport { VentasComponent };","map":{"version":3,"mappings":"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","names":["Component","Venta","Producto","VentasComponent","constructor","servicioVentas","servicioProductos","servicioClientes","ngOnInit","getVentas","getRolDB","getSucursal","subscribe","data","ventas","traerProductos","getClientes","error","console","log","verDetalles","v","nuevaVenta","productosNuevaVenta","totalNuevaVenta","mostrarNuevaVenta","getIDUser","idCliente","getCaja","NuevaVenta","codigoNuevaVenta","codido_venta","mostrarInfoProducto","productoSeleccionado","getProducto","productos","idProductoSeleccionado","dejarDeMostrarNuevaVenta","getProductosSucursal","agregarProductoAVenta","nuevaVentaForm","resetForm","stringUser","localStorage","getItem","usuario","JSON","parse","rol","caja","parseInt","identificacion","suc","sucursal","idp","pr","forEach","p","codigo","clientes","searchProducto","clave","clientesT","buscarClientes","claveNormalizada","toLowerCase","filter","cliente","toString","includes","nombre","nit","telefono","seleccionarCliente","idC","mostrarSeleccionarCliente","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/eiler/Documentos/Universidad/SegundoSemestre2024/Archivos/Proyecto1/app/FRONTEND/src/app/area-cajero/ventas/ventas.component.ts"],"sourcesContent":["import { Component } from '@angular/core';\nimport { Venta } from 'src/app/Modelo/Venta';\nimport { VentasService } from 'src/app/Service/ventas.service';\nimport { ProductosService } from 'src/app/Service/productos.service';\nimport { Producto } from 'src/app/Modelo/Producto';\nimport { Usuario } from 'src/app/Modelo/Usuario';\nimport { data, error } from 'jquery';\nimport { NgForm } from '@angular/forms';\nimport { ClientesService } from 'src/app/Service/clientes.service';\nimport { Cliente } from 'src/app/Modelo/Cliente';\nimport { ProdcutosVenta } from 'src/app/Modelo/ProductosVenta';\n@Component({\n  selector: 'app-ventas',\n  templateUrl: './ventas.component.html',\n  styleUrls: ['./ventas.component.css']\n})\nexport class VentasComponent {\n\n  constructor(private servicioVentas:VentasService, private servicioProductos:ProductosService,\n    private servicioClientes:ClientesService\n  ){}\n  ngOnInit():void{\n    this.servicioVentas.getVentas(this.getRolDB(),this.getSucursal()).subscribe(data=>{\n      this.ventas=data;\n      this.traerProductos();\n      this.getClientes();\n    },error=>{\n      console.log(error)\n      this.traerProductos();\n      this.getClientes();\n    })\n  }\n\n  productosNuevaVenta!:ProdcutosVenta[]\n\n  totalNuevaVenta:number=0\n  productos!:Producto[]\n  mostrarDetalles:boolean=false\n  mostrarNuevaVenta:boolean=false\n  mostrarSeleccionarCliente:boolean=false;\n  \n  clientes!:Cliente[]\n  clientesT!:Cliente[]\n\n  ventas!:Venta[]\n  precioVentaProducto!:number\n  idProductoSeleccionado!:number\n  productoSeleccionado:Producto = new Producto(1,\"\",0,\"\",12,1,);\n  idCliente!:number\n\n  claveBusqueda!:string\n\n  cantidadProducto!:number\n  codigoNuevaVenta!:number\n\n\n  verDetalles(v:Venta){\n    console.log(v)\n  }\n\n  nuevaVenta(){\n    //generar la nueva venta\n    this.productosNuevaVenta=[]\n    this.totalNuevaVenta=0;\n    this.mostrarNuevaVenta=true;\n    let v = new Venta(1,this.getIDUser(),\"\",this.getSucursal(),\"\",this.idCliente,\"\",\"\",0,0,\"\",this.getCaja(),0)\n    console.log(v);\n    this.servicioVentas.NuevaVenta(v,this.getRolDB()).subscribe(data=>{\n      this.codigoNuevaVenta=data.codido_venta\n    })\n  }\n  mostrarInfoProducto(){\n    console.log(\"Mostrar info de producto\")\n    this.productoSeleccionado = this.getProducto(this.productos,(this.idProductoSeleccionado));\n    \n  }\n  dejarDeMostrarNuevaVenta(){\n    this.mostrarNuevaVenta=false;\n    if(this.totalNuevaVenta==0){\n      //eliminar la venta\n      this.ngOnInit();\n      \n    }else{\n      this.ngOnInit();\n    }\n  }\n  traerProductos(){\n    this.servicioProductos.getProductosSucursal(this.getSucursal(),this.getRolDB()).subscribe(data=>{\n      this.productos=data;\n      console.log(this.productos)\n    }, error=>{\n      console.log(error)\n    })\n  }\n  agregarProductoAVenta(nuevaVentaForm:NgForm){\n    nuevaVentaForm.resetForm();\n    //insertar productos a la venta\n  }\n\n  getRolDB(){\n    let stringUser = localStorage.getItem('usuario');\n    let usuario:Usuario = stringUser? JSON.parse(stringUser):null;\n    let rol = usuario? usuario.rol:0;\n    return rol;\n  }\n  getCaja(){\n    let stringUser = localStorage.getItem('codigocaja');\n    let caja:number = parseInt(stringUser? JSON.parse(stringUser):\"\");\n    return caja;\n  }\n  getIDUser(){\n    let stringUser = localStorage.getItem('usuario');\n    let usuario:Usuario = stringUser? JSON.parse(stringUser):null;\n    let rol = usuario? usuario.identificacion:0;\n    return rol;\n  }\n  getSucursal(){\n    let stringUser = localStorage.getItem('usuario');\n    let usuario:Usuario = stringUser? JSON.parse(stringUser):null;\n    let suc = usuario? usuario.sucursal:0;\n    return suc;\n  }\n\n  getProducto(productos: Producto[], idp: number): Producto {\n    let pr:Producto=new Producto(1,\"\",0,\"\",0,4)\n    productos.forEach(p => {\n      if(p.codigo==idp){\n        pr=p;\n      }\n      \n    });\n    return pr;\n  }\n\n  getClientes(){\n    this.servicioClientes.getClientes(this.getRolDB()).subscribe(data=>{\n      this.clientes=data;\n      console\n      .log(this.clientes)\n    }, error=>{\n      console.log(error)\n    })\n  }\n  \n\n  searchProducto(clave: string) {\n    this.clientes = clave === \"\" ? this.clientesT : this.buscarClientes(clave, this.clientesT);\n  }\n  \n\n  buscarClientes(clave: string, clientes: Cliente[]): Cliente[] {\n    const claveNormalizada = clave.toLowerCase();\n    \n    return clientes.filter(cliente => {\n      return (\n        cliente.identificacion.toString().includes(claveNormalizada) || \n        cliente.nombre.toLowerCase().includes(claveNormalizada)||\n        cliente.nit.toLowerCase().includes(claveNormalizada)||\n        cliente.telefono.toString().includes(claveNormalizada)\n      );\n    });\n  }\n\n  seleccionarCliente(idC:number){\n    this.mostrarSeleccionarCliente=true;\n  }\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}