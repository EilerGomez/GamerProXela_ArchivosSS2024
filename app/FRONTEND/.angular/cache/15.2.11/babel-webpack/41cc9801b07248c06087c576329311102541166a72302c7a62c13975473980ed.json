{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component } from '@angular/core';\nimport { Compra } from 'src/app/Modelo/Compra';\nimport { ProdcutosCompra } from 'src/app/Modelo/ProductosCompra';\nlet ComprasComponent = class ComprasComponent {\n  constructor(servicioCompras, servicioProductos) {\n    this.servicioCompras = servicioCompras;\n    this.servicioProductos = servicioProductos;\n    this.mostrarNuevaCompra = false;\n    this.totalNuevaCompra = 0;\n    this.mostrarDetalles = false;\n  }\n  ngOnInit() {\n    this.servicioCompras.getCompras(this.getRolDB()).subscribe(data => {\n      this.compras = data;\n      this.traerProductos();\n    }, error => {\n      console.log(error);\n      this.traerProductos();\n    });\n  }\n  verDetalles(compra) {\n    this.mostrarDetalles = true;\n    this.servicioProductos.getProductosNuevaCompra(compra.codigo, this.getRolDB()).subscribe(data => {\n      this.productosNuevaCompra = data;\n      this.codigoDetalleCompra = compra.codigo;\n      this.totalNuevaCompra = compra.total_compra;\n    });\n  }\n  filtrarCompras(filtro) {\n    console.log(\"filtro: \" + filtro);\n  }\n  getRolDB() {\n    let stringUser = localStorage.getItem('usuario');\n    let usuario = stringUser ? JSON.parse(stringUser) : null;\n    let rol = usuario ? usuario.rol : 0;\n    return rol;\n  }\n  getIDUser() {\n    let stringUser = localStorage.getItem('usuario');\n    let usuario = stringUser ? JSON.parse(stringUser) : null;\n    let rol = usuario ? usuario.identificacion : 0;\n    return rol;\n  }\n  getSucursal() {\n    let stringUser = localStorage.getItem('usuario');\n    let usuario = stringUser ? JSON.parse(stringUser) : null;\n    let suc = usuario ? usuario.sucursal : 0;\n    return suc;\n  }\n  nuevaCompra() {\n    //hacer que se agregue una nueva compra\n    this.productosNuevaCompra = [];\n    this.totalNuevaCompra = 0;\n    this.mostrarNuevaCompra = true;\n    let compra = new Compra();\n    compra.usuario = this.getIDUser();\n    compra.sucursal = this.getSucursal();\n    this.servicioCompras.nuevaCompra(compra, this.getRolDB()).subscribe(data => {\n      this.codigoNuevaCompra = data.codigo_compra;\n      console.log(this.codigoNuevaCompra);\n    }, error => {\n      console.log(error);\n    });\n  }\n  traerProductosNuevaCompra(idC) {\n    this.servicioProductos.getProductosNuevaCompra(idC, this.getRolDB()).subscribe(data => {\n      this.productosNuevaCompra = data;\n    }, error => {\n      console.log(error);\n    });\n  }\n  agregarProductoACompra(nuevaCompraForm) {\n    let pc = new ProdcutosCompra(this.codigoNuevaCompra, parseInt(this.productoSeleccionado), this.cantidadProducto, this.precioProducto);\n    this.servicioProductos.nuevoProductoCompra(pc, this.getRolDB()).subscribe(data => {\n      console.log(data);\n      this.traerProductosNuevaCompra(this.codigoNuevaCompra);\n      nuevaCompraForm.resetForm();\n      this.totalNuevaCompra += pc.cantidad * pc.precio_unitario;\n    }, error => {\n      console.log(error);\n    });\n  }\n  traerProductos() {\n    this.servicioProductos.getProductosSucursal(this.getSucursal(), this.getRolDB()).subscribe(data => {\n      this.productos = data;\n    }, error => {\n      console.log(error);\n    });\n  }\n  dejarDeMostrarNuevaCompra() {\n    this.mostrarNuevaCompra = false;\n    if (this.totalNuevaCompra == 0) {\n      //eliminar la compra\n      this.servicioCompras.deleteCompra(this.getRolDB(), this.codigoNuevaCompra).subscribe(data => {\n        console.log(\"compra eliminada\");\n        this.ngOnInit();\n      });\n    } else {\n      this.ngOnInit();\n    }\n  }\n};\nComprasComponent = __decorate([Component({\n  selector: 'app-compras',\n  templateUrl: './compras.component.html',\n  styleUrls: ['./compras.component.css']\n})], ComprasComponent);\nexport { ComprasComponent };","map":{"version":3,"mappings":"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","names":["Component","Compra","ProdcutosCompra","ComprasComponent","constructor","servicioCompras","servicioProductos","ngOnInit","getCompras","getRolDB","subscribe","data","compras","traerProductos","error","console","log","verDetalles","compra","mostrarDetalles","getProductosNuevaCompra","codigo","productosNuevaCompra","codigoDetalleCompra","totalNuevaCompra","total_compra","filtrarCompras","filtro","stringUser","localStorage","getItem","usuario","JSON","parse","rol","getIDUser","identificacion","getSucursal","suc","sucursal","nuevaCompra","mostrarNuevaCompra","codigoNuevaCompra","codigo_compra","traerProductosNuevaCompra","idC","agregarProductoACompra","nuevaCompraForm","pc","parseInt","productoSeleccionado","cantidadProducto","precioProducto","nuevoProductoCompra","resetForm","cantidad","precio_unitario","getProductosSucursal","productos","dejarDeMostrarNuevaCompra","deleteCompra","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/home/eiler/Documentos/Universidad/SegundoSemestre2024/Archivos/Proyecto1/app/FRONTEND/src/app/area-bodega/compras/compras.component.ts"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { Compra } from 'src/app/Modelo/Compra';\nimport { ComprasService } from 'src/app/Service/compras.service';\nimport { Usuario } from 'src/app/Modelo/Usuario';\nimport { data, error } from 'jquery';\nimport { Producto } from 'src/app/Modelo/Producto';\nimport { ProductosService } from 'src/app/Service/productos.service';\nimport { ProdcutosCompra } from 'src/app/Modelo/ProductosCompra';\nimport { NgForm } from '@angular/forms';\n@Component({\n  selector: 'app-compras',\n  templateUrl: './compras.component.html',\n  styleUrls: ['./compras.component.css']\n})\nexport class ComprasComponent {\n  constructor(private servicioCompras:ComprasService, private servicioProductos:ProductosService){}\n  compras!:Compra[]\n  mostrarNuevaCompra:boolean=false;\n  productos!:Producto[]\n\n  precioProducto!:number\n  cantidadProducto!:number\n  productoSeleccionado!:any\n\n  codigoNuevaCompra!:number\n\n  productosNuevaCompra !:ProdcutosCompra[]\n\n  totalNuevaCompra:number=0;\n\n  codigoDetalleCompra!:number\n  mostrarDetalles:boolean=false;\n\n  ngOnInit():void{\n    this.servicioCompras.getCompras(this.getRolDB()).subscribe(data=>{\n      this.compras=data;\n      this.traerProductos();\n    }, error=>{\n      console.log(error)\n      this.traerProductos();\n    })\n  }\n  verDetalles(compra:Compra){\n    this.mostrarDetalles=true;\n    this.servicioProductos.getProductosNuevaCompra(compra.codigo,this.getRolDB()).subscribe(data=>{\n      this.productosNuevaCompra=data\n      this.codigoDetalleCompra=compra.codigo\n      this.totalNuevaCompra=compra.total_compra\n    })\n  }\n\n  filtrarCompras(filtro:string){\n    console.log(\"filtro: \" + filtro)\n  }\n\n  getRolDB(){\n    let stringUser = localStorage.getItem('usuario');\n    let usuario:Usuario = stringUser? JSON.parse(stringUser):null;\n    let rol = usuario? usuario.rol:0;\n    return rol;\n  }\n  getIDUser(){\n    let stringUser = localStorage.getItem('usuario');\n    let usuario:Usuario = stringUser? JSON.parse(stringUser):null;\n    let rol = usuario? usuario.identificacion:0;\n    return rol;\n  }\n  getSucursal(){\n    let stringUser = localStorage.getItem('usuario');\n    let usuario:Usuario = stringUser? JSON.parse(stringUser):null;\n    let suc = usuario? usuario.sucursal:0;\n    return suc;\n  }\n\n  nuevaCompra(){\n    //hacer que se agregue una nueva compra\n    this.productosNuevaCompra= []\n    this.totalNuevaCompra=0;\n    this.mostrarNuevaCompra=true;\n    let compra = new Compra();\n    compra.usuario=this.getIDUser();\n    compra.sucursal=this.getSucursal();\n    this.servicioCompras.nuevaCompra(compra,this.getRolDB()).subscribe(data=>{\n      this.codigoNuevaCompra=data.codigo_compra;\n      console.log(this.codigoNuevaCompra)\n      \n    },error=>{\n      console.log(error)\n    })\n  }\n\n  traerProductosNuevaCompra(idC:number){\n    this.servicioProductos.getProductosNuevaCompra(idC,this.getRolDB()).subscribe(data=>{\n      this.productosNuevaCompra=data;\n    },error=>{\n      console.log(error)\n    })\n  }\n\n  agregarProductoACompra(nuevaCompraForm:NgForm) {\n    let pc = new ProdcutosCompra(this.codigoNuevaCompra,parseInt(this.productoSeleccionado),this.cantidadProducto,this.precioProducto);\n    this.servicioProductos.nuevoProductoCompra(pc,this.getRolDB()).subscribe(data=>{\n      console.log(data);\n      this.traerProductosNuevaCompra(this.codigoNuevaCompra);\n      nuevaCompraForm.resetForm();\n      this.totalNuevaCompra+=pc.cantidad*pc.precio_unitario;\n    }, error=>{\n      console.log(error)\n    })\n  }\n\n  traerProductos(){\n    this.servicioProductos.getProductosSucursal(this.getSucursal(),this.getRolDB()).subscribe(data=>{\n      this.productos=data;\n    }, error=>{\n      console.log(error)\n    })\n  }\n\n  dejarDeMostrarNuevaCompra(){\n    this.mostrarNuevaCompra=false;\n    if(this.totalNuevaCompra==0){\n      //eliminar la compra\n      this.servicioCompras.deleteCompra(this.getRolDB(),this.codigoNuevaCompra).subscribe(data=>{\n        console.log(\"compra eliminada\");\n        this.ngOnInit();\n      })\n    }else{\n      this.ngOnInit();\n    }\n  }\n  \n\n\n\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}